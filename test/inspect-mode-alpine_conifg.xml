<?xml version='1.1' encoding='UTF-8'?>
<project>
  <actions/>
  <description>构建alpine image，并从Jenkins直接上传tio cloud。&#xd;
每30秒读取一次安全策略合规情况。</description>
  <keepDependencies>false</keepDependencies>
  <properties/>
  <scm class="hudson.plugins.git.GitSCM" plugin="git@3.9.1">
    <configVersion>2</configVersion>
    <userRemoteConfigs>
      <hudson.plugins.git.UserRemoteConfig>
        <url>https://github.com/shawntns/docker-myjenkins</url>
      </hudson.plugins.git.UserRemoteConfig>
    </userRemoteConfigs>
    <branches>
      <hudson.plugins.git.BranchSpec>
        <name>*/master</name>
      </hudson.plugins.git.BranchSpec>
    </branches>
    <doGenerateSubmoduleConfigurations>false</doGenerateSubmoduleConfigurations>
    <submoduleCfg class="list"/>
    <extensions/>
  </scm>
  <canRoam>true</canRoam>
  <disabled>false</disabled>
  <blockBuildWhenDownstreamBuilding>false</blockBuildWhenDownstreamBuilding>
  <blockBuildWhenUpstreamBuilding>false</blockBuildWhenUpstreamBuilding>
  <triggers/>
  <concurrentBuild>false</concurrentBuild>
  <builders>
    <org.jenkinsci.plugins.dockerbuildstep.DockerBuilder plugin="docker-build-step@2.2">
      <dockerCmd class="org.jenkinsci.plugins.dockerbuildstep.cmd.CreateImageCommand">
        <dockerFolder>$WORKSPACE</dockerFolder>
        <imageTag>$JOB_BASE_NAME:$BUILD_ID</imageTag>
        <dockerFile>Dockerfile</dockerFile>
        <noCache>false</noCache>
        <rm>false</rm>
        <buildArgs></buildArgs>
      </dockerCmd>
    </org.jenkinsci.plugins.dockerbuildstep.DockerBuilder>
    <hudson.tasks.Shell>
      <command>#!/bin/bash
set +x
echo &quot;Preparing image manifest sending to T.io cloud, please hold on...&quot;
docker save $JOB_BASE_NAME:$BUILD_ID | docker run --rm \
-e TENABLE_ACCESS_KEY=${TENABLE_ACCESS_KEY} \
-e TENABLE_SECRET_KEY=${TENABLE_SECRET_KEY} \
-e IMPORT_REPO_NAME=shawn_$JOB_BASE_NAME \
-i tenableio-docker-consec-local.jfrog.io/cs-scanner:latest inspect-image $JOB_BASE_NAME:$BUILD_ID

response=$(curl &quot;https://cloud.tenable.com/container-security/api/v1/compliancebyname?image=$JOB_BASE_NAME&amp;repo=shawn_$JOB_BASE_NAME&amp;tag=$BUILD_ID&quot; -H &quot;X-ApiKeys: accessKey=$TENABLE_ACCESS_KEY; secretKey=$TENABLE_SECRET_KEY&quot; -s --insecure | cut -d &apos;&quot;&apos; -f4)

if [ &quot;$response&quot; = &quot;pass&quot; ]; then
  echo &quot;Image compliant status $response, container image met security policy requirement.&quot;
  curl &quot;https://cloud.tenable.com/container-security/api/v1/compliancebyname?image=$JOB_BASE_NAME&amp;repo=shawn_$JOB_BASE_NAME&amp;tag=$BUILD_ID&quot; -H &quot;X-ApiKeys: accessKey=$TENABLE_ACCESS_KEY; secretKey=$TENABLE_SECRET_KEY&quot; -s --insecure | cut -d &apos;&quot;&apos; -f4
  exit 0
elif [ &quot;$response&quot; = &quot;fail&quot; ]; then
  echo &quot;Image compliant status $response, container image contain vulnerabilities and does not meet security policy requirement.&quot;
  exit 1
else
  echo &quot;Preparing image manifest sending to T.io cloud, please hold on...&quot;
  sleep 30
  if [ &quot;$response&quot; = &quot;pass&quot; ]; then
    echo &quot;Image compliant status $response, container image met security policy requirement.&quot;
    curl &quot;https://cloud.tenable.com/container-security/api/v1/compliancebyname?image=$JOB_BASE_NAME&amp;repo=shawn_$JOB_BASE_NAME&amp;tag=$BUILD_ID&quot; -H &quot;X-ApiKeys: accessKey=$TENABLE_ACCESS_KEY; secretKey=$TENABLE_SECRET_KEY&quot; -s --insecure | cut -d &apos;&quot;&apos; -f4
    exit 0
  elif [ &quot;$response&quot; = &quot;fail&quot; ]; then
    echo &quot;Image compliant status $response, container image contain vulnerabilities and does not meet security policy requirement.&quot;
    exit 1
  else
    echo &quot;Preparing image manifest sending to T.io cloud, please hold on...&quot;
    sleep 30
    if [ &quot;$response&quot; = &quot;error&quot; ]; then
      echo &quot;Image compliant status $response, container image testing in progress, please try again later.&quot;
      exit 2
    elif [ &quot;$response&quot; = &quot;fail&quot; ]; then
      echo &quot;Image compliant status $response, container image contain vulnerabilities and does not meet security policy requirement.&quot;
      exit 1
    fi
    echo &quot;Image compliant status $response, container image met security policy requirement.&quot;
    curl &quot;https://cloud.tenable.com/container-security/api/v1/compliancebyname?image=$JOB_BASE_NAME&amp;repo=shawn_$JOB_BASE_NAME&amp;tag=$BUILD_ID&quot; -H &quot;X-ApiKeys: accessKey=$TENABLE_ACCESS_KEY; secretKey=$TENABLE_SECRET_KEY&quot; -s --insecure | cut -d &apos;&quot;&apos; -f4
    exit 0
  fi
fi
</command>
    </hudson.tasks.Shell>
    <org.jenkinsci.plugins.dockerbuildstep.DockerBuilder plugin="docker-build-step@2.2">
      <dockerCmd class="org.jenkinsci.plugins.dockerbuildstep.cmd.RemoveImageCommand">
        <imageName>$JOB_BASE_NAME:$BUILD_ID</imageName>
        <imageId></imageId>
        <ignoreIfNotFound>false</ignoreIfNotFound>
      </dockerCmd>
    </org.jenkinsci.plugins.dockerbuildstep.DockerBuilder>
  </builders>
  <publishers/>
  <buildWrappers>
    <org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper plugin="credentials-binding@1.17">
      <bindings>
        <org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
          <credentialsId>TIO_ACCESS_KEY</credentialsId>
          <usernameVariable>TENABLE_ACCESS_KEY</usernameVariable>
          <passwordVariable>TENABLE_SECRET_KEY</passwordVariable>
        </org.jenkinsci.plugins.credentialsbinding.impl.UsernamePasswordMultiBinding>
      </bindings>
    </org.jenkinsci.plugins.credentialsbinding.impl.SecretBuildWrapper>
  </buildWrappers>
</project>
